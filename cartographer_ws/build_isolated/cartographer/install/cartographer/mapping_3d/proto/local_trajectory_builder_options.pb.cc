// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/local_trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_3d/proto/local_trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalTrajectoryBuilderOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalTrajectoryBuilderOptions_Use_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping_3d/proto/local_trajectory_builder_options.proto");
  GOOGLE_CHECK(file != NULL);
  LocalTrajectoryBuilderOptions_descriptor_ = file->message_type(0);
  static const int LocalTrajectoryBuilderOptions_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, laser_min_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, laser_max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, scans_per_accumulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, laser_voxel_filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, high_resolution_adaptive_voxel_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, low_resolution_adaptive_voxel_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, ceres_scan_matcher_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, motion_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, submaps_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, kalman_local_trajectory_builder_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, optimizing_local_trajectory_builder_options_),
  };
  LocalTrajectoryBuilderOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalTrajectoryBuilderOptions_descriptor_,
      LocalTrajectoryBuilderOptions::default_instance_,
      LocalTrajectoryBuilderOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalTrajectoryBuilderOptions));
  LocalTrajectoryBuilderOptions_Use_descriptor_ = LocalTrajectoryBuilderOptions_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalTrajectoryBuilderOptions_descriptor_, &LocalTrajectoryBuilderOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  delete LocalTrajectoryBuilderOptions::default_instance_;
  delete LocalTrajectoryBuilderOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping_3d::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();
  ::cartographer::sensor::proto::protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  ::cartographer::mapping_3d::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  ::cartographer::mapping_3d::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  ::cartographer::mapping_3d::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nDcartographer/mapping_3d/proto/local_tr"
    "ajectory_builder_options.proto\022\035cartogra"
    "pher.mapping_3d.proto\0329cartographer/mapp"
    "ing_3d/proto/motion_filter_options.proto"
    "\032=cartographer/sensor/proto/adaptive_vox"
    "el_filter_options.proto\032Kcartographer/ma"
    "pping_3d/proto/kalman_local_trajectory_b"
    "uilder_options.proto\032Ocartographer/mappi"
    "ng_3d/proto/optimizing_local_trajectory_"
    "builder_options.proto\0323cartographer/mapp"
    "ing_3d/proto/submaps_options.proto\032Lcart"
    "ographer/mapping_3d/scan_matching/proto/"
    "ceres_scan_matcher_options.proto\"\326\007\n\035Loc"
    "alTrajectoryBuilderOptions\022\027\n\017laser_min_"
    "range\030\001 \001(\002\022\027\n\017laser_max_range\030\002 \001(\002\022\036\n\026"
    "scans_per_accumulation\030\003 \001(\005\022\037\n\027laser_vo"
    "xel_filter_size\030\004 \001(\002\022l\n-high_resolution"
    "_adaptive_voxel_filter_options\030\005 \001(\01325.c"
    "artographer.sensor.proto.AdaptiveVoxelFi"
    "lterOptions\022k\n,low_resolution_adaptive_v"
    "oxel_filter_options\030\014 \001(\01325.cartographer"
    ".sensor.proto.AdaptiveVoxelFilterOptions"
    "\022h\n\032ceres_scan_matcher_options\030\006 \001(\0132D.c"
    "artographer.mapping_3d.scan_matching.pro"
    "to.CeresScanMatcherOptions\022Q\n\025motion_fil"
    "ter_options\030\007 \001(\01322.cartographer.mapping"
    "_3d.proto.MotionFilterOptions\022F\n\017submaps"
    "_options\030\010 \001(\0132-.cartographer.mapping_3d"
    ".proto.SubmapsOptions\022M\n\003use\030\t \001(\0162@.car"
    "tographer.mapping_3d.proto.LocalTrajecto"
    "ryBuilderOptions.Use\022s\n\'kalman_local_tra"
    "jectory_builder_options\030\n \001(\0132B.cartogra"
    "pher.mapping_3d.proto.KalmanLocalTraject"
    "oryBuilderOptions\022{\n+optimizing_local_tr"
    "ajectory_builder_options\030\013 \001(\0132F.cartogr"
    "apher.mapping_3d.proto.OptimizingLocalTr"
    "ajectoryBuilderOptions\"!\n\003Use\022\n\n\006KALMAN\020"
    "\000\022\016\n\nOPTIMIZING\020\001", 1497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_3d/proto/local_trajectory_builder_options.proto", &protobuf_RegisterTypes);
  LocalTrajectoryBuilderOptions::default_instance_ = new LocalTrajectoryBuilderOptions();
  LocalTrajectoryBuilderOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LocalTrajectoryBuilderOptions_Use_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalTrajectoryBuilderOptions_Use_descriptor_;
}
bool LocalTrajectoryBuilderOptions_Use_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocalTrajectoryBuilderOptions_Use LocalTrajectoryBuilderOptions::KALMAN;
const LocalTrajectoryBuilderOptions_Use LocalTrajectoryBuilderOptions::OPTIMIZING;
const LocalTrajectoryBuilderOptions_Use LocalTrajectoryBuilderOptions::Use_MIN;
const LocalTrajectoryBuilderOptions_Use LocalTrajectoryBuilderOptions::Use_MAX;
const int LocalTrajectoryBuilderOptions::Use_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocalTrajectoryBuilderOptions::kLaserMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions::kLaserMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions::kScansPerAccumulationFieldNumber;
const int LocalTrajectoryBuilderOptions::kLaserVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions::kHighResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kLowResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kSubmapsOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kUseFieldNumber;
const int LocalTrajectoryBuilderOptions::kKalmanLocalTrajectoryBuilderOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kOptimizingLocalTrajectoryBuilderOptionsFieldNumber;
#endif  // !_MSC_VER

LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalTrajectoryBuilderOptions::InitAsDefaultInstance() {
  high_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(&::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::default_instance());
  low_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(&::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::default_instance());
  ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions*>(&::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::default_instance());
  motion_filter_options_ = const_cast< ::cartographer::mapping_3d::proto::MotionFilterOptions*>(&::cartographer::mapping_3d::proto::MotionFilterOptions::default_instance());
  submaps_options_ = const_cast< ::cartographer::mapping_3d::proto::SubmapsOptions*>(&::cartographer::mapping_3d::proto::SubmapsOptions::default_instance());
  kalman_local_trajectory_builder_options_ = const_cast< ::cartographer::mapping_3d::proto::KalmanLocalTrajectoryBuilderOptions*>(&::cartographer::mapping_3d::proto::KalmanLocalTrajectoryBuilderOptions::default_instance());
  optimizing_local_trajectory_builder_options_ = const_cast< ::cartographer::mapping_3d::proto::OptimizingLocalTrajectoryBuilderOptions*>(&::cartographer::mapping_3d::proto::OptimizingLocalTrajectoryBuilderOptions::default_instance());
}

LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions(const LocalTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  laser_min_range_ = 0;
  laser_max_range_ = 0;
  scans_per_accumulation_ = 0;
  laser_voxel_filter_size_ = 0;
  high_resolution_adaptive_voxel_filter_options_ = NULL;
  low_resolution_adaptive_voxel_filter_options_ = NULL;
  ceres_scan_matcher_options_ = NULL;
  motion_filter_options_ = NULL;
  submaps_options_ = NULL;
  use_ = 0;
  kalman_local_trajectory_builder_options_ = NULL;
  optimizing_local_trajectory_builder_options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalTrajectoryBuilderOptions::~LocalTrajectoryBuilderOptions() {
  SharedDtor();
}

void LocalTrajectoryBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
    delete high_resolution_adaptive_voxel_filter_options_;
    delete low_resolution_adaptive_voxel_filter_options_;
    delete ceres_scan_matcher_options_;
    delete motion_filter_options_;
    delete submaps_options_;
    delete kalman_local_trajectory_builder_options_;
    delete optimizing_local_trajectory_builder_options_;
  }
}

void LocalTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalTrajectoryBuilderOptions_descriptor_;
}

const LocalTrajectoryBuilderOptions& LocalTrajectoryBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

LocalTrajectoryBuilderOptions* LocalTrajectoryBuilderOptions::default_instance_ = NULL;

LocalTrajectoryBuilderOptions* LocalTrajectoryBuilderOptions::New() const {
  return new LocalTrajectoryBuilderOptions;
}

void LocalTrajectoryBuilderOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    laser_min_range_ = 0;
    laser_max_range_ = 0;
    scans_per_accumulation_ = 0;
    laser_voxel_filter_size_ = 0;
    if (has_high_resolution_adaptive_voxel_filter_options()) {
      if (high_resolution_adaptive_voxel_filter_options_ != NULL) high_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
    }
    if (has_low_resolution_adaptive_voxel_filter_options()) {
      if (low_resolution_adaptive_voxel_filter_options_ != NULL) low_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
    }
    if (has_ceres_scan_matcher_options()) {
      if (ceres_scan_matcher_options_ != NULL) ceres_scan_matcher_options_->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::Clear();
    }
    if (has_motion_filter_options()) {
      if (motion_filter_options_ != NULL) motion_filter_options_->::cartographer::mapping_3d::proto::MotionFilterOptions::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_submaps_options()) {
      if (submaps_options_ != NULL) submaps_options_->::cartographer::mapping_3d::proto::SubmapsOptions::Clear();
    }
    use_ = 0;
    if (has_kalman_local_trajectory_builder_options()) {
      if (kalman_local_trajectory_builder_options_ != NULL) kalman_local_trajectory_builder_options_->::cartographer::mapping_3d::proto::KalmanLocalTrajectoryBuilderOptions::Clear();
    }
    if (has_optimizing_local_trajectory_builder_options()) {
      if (optimizing_local_trajectory_builder_options_ != NULL) optimizing_local_trajectory_builder_options_->::cartographer::mapping_3d::proto::OptimizingLocalTrajectoryBuilderOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float laser_min_range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_min_range_)));
          set_has_laser_min_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_laser_max_range;
        break;
      }

      // optional float laser_max_range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_max_range_)));
          set_has_laser_max_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scans_per_accumulation;
        break;
      }

      // optional int32 scans_per_accumulation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scans_per_accumulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scans_per_accumulation_)));
          set_has_scans_per_accumulation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_laser_voxel_filter_size;
        break;
      }

      // optional float laser_voxel_filter_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_voxel_filter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_voxel_filter_size_)));
          set_has_laser_voxel_filter_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_high_resolution_adaptive_voxel_filter_options;
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_high_resolution_adaptive_voxel_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ceres_scan_matcher_options;
        break;
      }

      // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ceres_scan_matcher_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_motion_filter_options;
        break;
      }

      // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_submaps_options;
        break;
      }

      // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submaps_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submaps_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_use;
        break;
      }

      // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.Use use = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions_Use_IsValid(value)) {
            set_use(static_cast< ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions_Use >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_kalman_local_trajectory_builder_options;
        break;
      }

      // optional .cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions kalman_local_trajectory_builder_options = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kalman_local_trajectory_builder_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kalman_local_trajectory_builder_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_optimizing_local_trajectory_builder_options;
        break;
      }

      // optional .cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions optimizing_local_trajectory_builder_options = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimizing_local_trajectory_builder_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizing_local_trajectory_builder_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_low_resolution_adaptive_voxel_filter_options;
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low_resolution_adaptive_voxel_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float laser_min_range = 1;
  if (has_laser_min_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->laser_min_range(), output);
  }

  // optional float laser_max_range = 2;
  if (has_laser_max_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->laser_max_range(), output);
  }

  // optional int32 scans_per_accumulation = 3;
  if (has_scans_per_accumulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scans_per_accumulation(), output);
  }

  // optional float laser_voxel_filter_size = 4;
  if (has_laser_voxel_filter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->laser_voxel_filter_size(), output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (has_high_resolution_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->high_resolution_adaptive_voxel_filter_options(), output);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
  if (has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ceres_scan_matcher_options(), output);
  }

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
  if (has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->motion_filter_options(), output);
  }

  // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
  if (has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->submaps_options(), output);
  }

  // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.Use use = 9;
  if (has_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->use(), output);
  }

  // optional .cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions kalman_local_trajectory_builder_options = 10;
  if (has_kalman_local_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->kalman_local_trajectory_builder_options(), output);
  }

  // optional .cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions optimizing_local_trajectory_builder_options = 11;
  if (has_optimizing_local_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->optimizing_local_trajectory_builder_options(), output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (has_low_resolution_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->low_resolution_adaptive_voxel_filter_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float laser_min_range = 1;
  if (has_laser_min_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->laser_min_range(), target);
  }

  // optional float laser_max_range = 2;
  if (has_laser_max_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->laser_max_range(), target);
  }

  // optional int32 scans_per_accumulation = 3;
  if (has_scans_per_accumulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scans_per_accumulation(), target);
  }

  // optional float laser_voxel_filter_size = 4;
  if (has_laser_voxel_filter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->laser_voxel_filter_size(), target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (has_high_resolution_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->high_resolution_adaptive_voxel_filter_options(), target);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
  if (has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ceres_scan_matcher_options(), target);
  }

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
  if (has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->motion_filter_options(), target);
  }

  // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
  if (has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->submaps_options(), target);
  }

  // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.Use use = 9;
  if (has_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->use(), target);
  }

  // optional .cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions kalman_local_trajectory_builder_options = 10;
  if (has_kalman_local_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->kalman_local_trajectory_builder_options(), target);
  }

  // optional .cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions optimizing_local_trajectory_builder_options = 11;
  if (has_optimizing_local_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->optimizing_local_trajectory_builder_options(), target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (has_low_resolution_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->low_resolution_adaptive_voxel_filter_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalTrajectoryBuilderOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float laser_min_range = 1;
    if (has_laser_min_range()) {
      total_size += 1 + 4;
    }

    // optional float laser_max_range = 2;
    if (has_laser_max_range()) {
      total_size += 1 + 4;
    }

    // optional int32 scans_per_accumulation = 3;
    if (has_scans_per_accumulation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scans_per_accumulation());
    }

    // optional float laser_voxel_filter_size = 4;
    if (has_laser_voxel_filter_size()) {
      total_size += 1 + 4;
    }

    // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
    if (has_high_resolution_adaptive_voxel_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high_resolution_adaptive_voxel_filter_options());
    }

    // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
    if (has_low_resolution_adaptive_voxel_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low_resolution_adaptive_voxel_filter_options());
    }

    // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
    if (has_ceres_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ceres_scan_matcher_options());
    }

    // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
    if (has_motion_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_filter_options());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
    if (has_submaps_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submaps_options());
    }

    // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.Use use = 9;
    if (has_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->use());
    }

    // optional .cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions kalman_local_trajectory_builder_options = 10;
    if (has_kalman_local_trajectory_builder_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kalman_local_trajectory_builder_options());
    }

    // optional .cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions optimizing_local_trajectory_builder_options = 11;
    if (has_optimizing_local_trajectory_builder_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optimizing_local_trajectory_builder_options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalTrajectoryBuilderOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions::MergeFrom(const LocalTrajectoryBuilderOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laser_min_range()) {
      set_laser_min_range(from.laser_min_range());
    }
    if (from.has_laser_max_range()) {
      set_laser_max_range(from.laser_max_range());
    }
    if (from.has_scans_per_accumulation()) {
      set_scans_per_accumulation(from.scans_per_accumulation());
    }
    if (from.has_laser_voxel_filter_size()) {
      set_laser_voxel_filter_size(from.laser_voxel_filter_size());
    }
    if (from.has_high_resolution_adaptive_voxel_filter_options()) {
      mutable_high_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.high_resolution_adaptive_voxel_filter_options());
    }
    if (from.has_low_resolution_adaptive_voxel_filter_options()) {
      mutable_low_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.low_resolution_adaptive_voxel_filter_options());
    }
    if (from.has_ceres_scan_matcher_options()) {
      mutable_ceres_scan_matcher_options()->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::MergeFrom(from.ceres_scan_matcher_options());
    }
    if (from.has_motion_filter_options()) {
      mutable_motion_filter_options()->::cartographer::mapping_3d::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_submaps_options()) {
      mutable_submaps_options()->::cartographer::mapping_3d::proto::SubmapsOptions::MergeFrom(from.submaps_options());
    }
    if (from.has_use()) {
      set_use(from.use());
    }
    if (from.has_kalman_local_trajectory_builder_options()) {
      mutable_kalman_local_trajectory_builder_options()->::cartographer::mapping_3d::proto::KalmanLocalTrajectoryBuilderOptions::MergeFrom(from.kalman_local_trajectory_builder_options());
    }
    if (from.has_optimizing_local_trajectory_builder_options()) {
      mutable_optimizing_local_trajectory_builder_options()->::cartographer::mapping_3d::proto::OptimizingLocalTrajectoryBuilderOptions::MergeFrom(from.optimizing_local_trajectory_builder_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions::CopyFrom(const LocalTrajectoryBuilderOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions::IsInitialized() const {

  return true;
}

void LocalTrajectoryBuilderOptions::Swap(LocalTrajectoryBuilderOptions* other) {
  if (other != this) {
    std::swap(laser_min_range_, other->laser_min_range_);
    std::swap(laser_max_range_, other->laser_max_range_);
    std::swap(scans_per_accumulation_, other->scans_per_accumulation_);
    std::swap(laser_voxel_filter_size_, other->laser_voxel_filter_size_);
    std::swap(high_resolution_adaptive_voxel_filter_options_, other->high_resolution_adaptive_voxel_filter_options_);
    std::swap(low_resolution_adaptive_voxel_filter_options_, other->low_resolution_adaptive_voxel_filter_options_);
    std::swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
    std::swap(motion_filter_options_, other->motion_filter_options_);
    std::swap(submaps_options_, other->submaps_options_);
    std::swap(use_, other->use_);
    std::swap(kalman_local_trajectory_builder_options_, other->kalman_local_trajectory_builder_options_);
    std::swap(optimizing_local_trajectory_builder_options_, other->optimizing_local_trajectory_builder_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalTrajectoryBuilderOptions_descriptor_;
  metadata.reflection = LocalTrajectoryBuilderOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
