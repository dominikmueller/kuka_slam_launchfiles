// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedPointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedPointCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaserScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaserScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaserScan_Values_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaserScan_Values_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/sensor/proto/sensor.proto");
  GOOGLE_CHECK(file != NULL);
  PointCloud_descriptor_ = file->message_type(0);
  static const int PointCloud_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, z_),
  };
  PointCloud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointCloud_descriptor_,
      PointCloud::default_instance_,
      PointCloud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointCloud));
  CompressedPointCloud_descriptor_ = file->message_type(1);
  static const int CompressedPointCloud_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, num_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, point_data_),
  };
  CompressedPointCloud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressedPointCloud_descriptor_,
      CompressedPointCloud::default_instance_,
      CompressedPointCloud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressedPointCloud));
  Matrix_descriptor_ = file->message_type(2);
  static const int Matrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, data_),
  };
  Matrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Matrix_descriptor_,
      Matrix::default_instance_,
      Matrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Matrix));
  LaserScan_descriptor_ = file->message_type(3);
  static const int LaserScan_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, time_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, scan_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, intensity_),
  };
  LaserScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaserScan_descriptor_,
      LaserScan::default_instance_,
      LaserScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaserScan));
  LaserScan_Values_descriptor_ = LaserScan_descriptor_->nested_type(0);
  static const int LaserScan_Values_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan_Values, value_),
  };
  LaserScan_Values_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaserScan_Values_descriptor_,
      LaserScan_Values::default_instance_,
      LaserScan_Values_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan_Values, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan_Values, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaserScan_Values));
  RangeData_descriptor_ = file->message_type(4);
  static const int RangeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, missing_echo_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, reflectivity_),
  };
  RangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeData_descriptor_,
      RangeData::default_instance_,
      RangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointCloud_descriptor_, &PointCloud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressedPointCloud_descriptor_, &CompressedPointCloud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Matrix_descriptor_, &Matrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaserScan_descriptor_, &LaserScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaserScan_Values_descriptor_, &LaserScan_Values::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeData_descriptor_, &RangeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  delete PointCloud::default_instance_;
  delete PointCloud_reflection_;
  delete CompressedPointCloud::default_instance_;
  delete CompressedPointCloud_reflection_;
  delete Matrix::default_instance_;
  delete Matrix_reflection_;
  delete LaserScan::default_instance_;
  delete LaserScan_reflection_;
  delete LaserScan_Values::default_instance_;
  delete LaserScan_Values_reflection_;
  delete RangeData::default_instance_;
  delete RangeData_reflection_;
}

void protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&cartographer/sensor/proto/sensor.proto"
    "\022\031cartographer.sensor.proto\032,cartographe"
    "r/transform/proto/transform.proto\"9\n\nPoi"
    "ntCloud\022\r\n\001x\030\003 \003(\002B\002\020\001\022\r\n\001y\030\004 \003(\002B\002\020\001\022\r\n"
    "\001z\030\005 \003(\002B\002\020\001\"B\n\024CompressedPointCloud\022\022\n\n"
    "num_points\030\001 \001(\005\022\026\n\npoint_data\030\003 \003(\005B\002\020\001"
    "\"2\n\006Matrix\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\014"
    "\n\004data\030\003 \003(\001\"\264\002\n\tLaserScan\022\021\n\tangle_min\030"
    "\002 \001(\002\022\021\n\tangle_max\030\003 \001(\002\022\027\n\017angle_increm"
    "ent\030\004 \001(\002\022\026\n\016time_increment\030\005 \001(\002\022\021\n\tsca"
    "n_time\030\006 \001(\002\022\021\n\trange_min\030\007 \001(\002\022\021\n\trange"
    "_max\030\010 \001(\002\022:\n\005range\030\t \003(\0132+.cartographer"
    ".sensor.proto.LaserScan.Values\022>\n\tintens"
    "ity\030\n \003(\0132+.cartographer.sensor.proto.La"
    "serScan.Values\032\033\n\006Values\022\021\n\005value\030\001 \003(\002B"
    "\002\020\001\"\342\001\n\tRangeData\0226\n\006origin\030\001 \001(\0132&.cart"
    "ographer.transform.proto.Vector3f\022:\n\013poi"
    "nt_cloud\030\002 \001(\0132%.cartographer.sensor.pro"
    "to.PointCloud\022G\n\030missing_echo_point_clou"
    "d\030\003 \001(\0132%.cartographer.sensor.proto.Poin"
    "tCloud\022\030\n\014reflectivity\030\004 \003(\005B\002\020\001B\010B\006Sens"
    "or", 842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/sensor.proto", &protobuf_RegisterTypes);
  PointCloud::default_instance_ = new PointCloud();
  CompressedPointCloud::default_instance_ = new CompressedPointCloud();
  Matrix::default_instance_ = new Matrix();
  LaserScan::default_instance_ = new LaserScan();
  LaserScan_Values::default_instance_ = new LaserScan_Values();
  RangeData::default_instance_ = new RangeData();
  PointCloud::default_instance_->InitAsDefaultInstance();
  CompressedPointCloud::default_instance_->InitAsDefaultInstance();
  Matrix::default_instance_->InitAsDefaultInstance();
  LaserScan::default_instance_->InitAsDefaultInstance();
  LaserScan_Values::default_instance_->InitAsDefaultInstance();
  RangeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fsensor_2eproto {
  StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
    protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  }
} static_descriptor_initializer_cartographer_2fsensor_2fproto_2fsensor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointCloud::kXFieldNumber;
const int PointCloud::kYFieldNumber;
const int PointCloud::kZFieldNumber;
#endif  // !_MSC_VER

PointCloud::PointCloud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointCloud::InitAsDefaultInstance() {
}

PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointCloud::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointCloud::~PointCloud() {
  SharedDtor();
}

void PointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloud_descriptor_;
}

const PointCloud& PointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

PointCloud* PointCloud::default_instance_ = NULL;

PointCloud* PointCloud::New() const {
  return new PointCloud;
}

void PointCloud::Clear() {
  x_.Clear();
  y_.Clear();
  z_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y;
        break;
      }

      // repeated float y = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z;
        break;
      }

      // repeated float z = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float x = 3 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->x(i), output);
  }

  // repeated float y = 4 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->y(i), output);
  }

  // repeated float z = 5 [packed = true];
  if (this->z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_z_cached_byte_size_);
  }
  for (int i = 0; i < this->z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->z(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointCloud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float x = 3 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->x(i), target);
  }

  // repeated float y = 4 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->y(i), target);
  }

  // repeated float z = 5 [packed = true];
  if (this->z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->z(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointCloud::ByteSize() const {
  int total_size = 0;

  // repeated float x = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float z = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->z_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointCloud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointCloud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {

  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    z_.Swap(&other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloud_descriptor_;
  metadata.reflection = PointCloud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !_MSC_VER

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressedPointCloud::InitAsDefaultInstance() {
}

CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedPointCloud::SharedCtor() {
  _cached_size_ = 0;
  num_points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedPointCloud::~CompressedPointCloud() {
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedPointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedPointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedPointCloud_descriptor_;
}

const CompressedPointCloud& CompressedPointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

CompressedPointCloud* CompressedPointCloud::default_instance_ = NULL;

CompressedPointCloud* CompressedPointCloud::New() const {
  return new CompressedPointCloud;
}

void CompressedPointCloud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_points_ = 0;
  }
  point_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));
          set_has_num_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point_data;
        break;
      }

      // repeated int32 point_data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_point_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_points = 1;
  if (has_num_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3 [packed = true];
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_data_cached_byte_size_);
  }
  for (int i = 0; i < this->point_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressedPointCloud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_points = 1;
  if (has_num_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3 [packed = true];
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _point_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->point_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressedPointCloud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_points = 1;
    if (has_num_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_points());
    }

  }
  // repeated int32 point_data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->point_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->point_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressedPointCloud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressedPointCloud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_data_.MergeFrom(from.point_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_points()) {
      set_num_points(from.num_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {

  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other != this) {
    std::swap(num_points_, other->num_points_);
    point_data_.Swap(&other->point_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedPointCloud_descriptor_;
  metadata.reflection = CompressedPointCloud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Matrix::kRowsFieldNumber;
const int Matrix::kColsFieldNumber;
const int Matrix::kDataFieldNumber;
#endif  // !_MSC_VER

Matrix::Matrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Matrix::InitAsDefaultInstance() {
}

Matrix::Matrix(const Matrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Matrix::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matrix::~Matrix() {
  SharedDtor();
}

void Matrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix_descriptor_;
}

const Matrix& Matrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

Matrix* Matrix::default_instance_ = NULL;

Matrix* Matrix::New() const {
  return new Matrix;
}

void Matrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rows_ = 0;
    cols_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Matrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Matrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // optional int32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cols());
    }

  }
  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Matrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Matrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Matrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {

  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Matrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix_descriptor_;
  metadata.reflection = Matrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaserScan_Values::kValueFieldNumber;
#endif  // !_MSC_VER

LaserScan_Values::LaserScan_Values()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LaserScan_Values::InitAsDefaultInstance() {
}

LaserScan_Values::LaserScan_Values(const LaserScan_Values& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LaserScan_Values::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaserScan_Values::~LaserScan_Values() {
  SharedDtor();
}

void LaserScan_Values::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaserScan_Values::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserScan_Values::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserScan_Values_descriptor_;
}

const LaserScan_Values& LaserScan_Values::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

LaserScan_Values* LaserScan_Values::default_instance_ = NULL;

LaserScan_Values* LaserScan_Values::New() const {
  return new LaserScan_Values;
}

void LaserScan_Values::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaserScan_Values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LaserScan_Values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LaserScan_Values::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LaserScan_Values::ByteSize() const {
  int total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserScan_Values::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaserScan_Values* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaserScan_Values*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaserScan_Values::MergeFrom(const LaserScan_Values& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaserScan_Values::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan_Values::CopyFrom(const LaserScan_Values& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan_Values::IsInitialized() const {

  return true;
}

void LaserScan_Values::Swap(LaserScan_Values* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaserScan_Values::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaserScan_Values_descriptor_;
  metadata.reflection = LaserScan_Values_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LaserScan::kAngleMinFieldNumber;
const int LaserScan::kAngleMaxFieldNumber;
const int LaserScan::kAngleIncrementFieldNumber;
const int LaserScan::kTimeIncrementFieldNumber;
const int LaserScan::kScanTimeFieldNumber;
const int LaserScan::kRangeMinFieldNumber;
const int LaserScan::kRangeMaxFieldNumber;
const int LaserScan::kRangeFieldNumber;
const int LaserScan::kIntensityFieldNumber;
#endif  // !_MSC_VER

LaserScan::LaserScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LaserScan::InitAsDefaultInstance() {
}

LaserScan::LaserScan(const LaserScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LaserScan::SharedCtor() {
  _cached_size_ = 0;
  angle_min_ = 0;
  angle_max_ = 0;
  angle_increment_ = 0;
  time_increment_ = 0;
  scan_time_ = 0;
  range_min_ = 0;
  range_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaserScan::~LaserScan() {
  SharedDtor();
}

void LaserScan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaserScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserScan_descriptor_;
}

const LaserScan& LaserScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

LaserScan* LaserScan::default_instance_ = NULL;

LaserScan* LaserScan::New() const {
  return new LaserScan;
}

void LaserScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_min_ = 0;
    angle_max_ = 0;
    angle_increment_ = 0;
    time_increment_ = 0;
    scan_time_ = 0;
    range_min_ = 0;
    range_max_ = 0;
  }
  range_.Clear();
  intensity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaserScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_min_)));
          set_has_angle_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle_max;
        break;
      }

      // optional float angle_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_max_)));
          set_has_angle_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle_increment;
        break;
      }

      // optional float angle_increment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_increment_)));
          set_has_angle_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_time_increment;
        break;
      }

      // optional float time_increment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_increment_)));
          set_has_time_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scan_time;
        break;
      }

      // optional float scan_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scan_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scan_time_)));
          set_has_scan_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_range_min;
        break;
      }

      // optional float range_min = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_min_)));
          set_has_range_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_range_max;
        break;
      }

      // optional float range_max = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_max_)));
          set_has_range_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_range;
        break;
      }

      // repeated .cartographer.sensor.proto.LaserScan.Values range = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_range;
        if (input->ExpectTag(82)) goto parse_intensity;
        break;
      }

      // repeated .cartographer.sensor.proto.LaserScan.Values intensity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intensity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intensity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_intensity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LaserScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float angle_min = 2;
  if (has_angle_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_min(), output);
  }

  // optional float angle_max = 3;
  if (has_angle_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_max(), output);
  }

  // optional float angle_increment = 4;
  if (has_angle_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle_increment(), output);
  }

  // optional float time_increment = 5;
  if (has_time_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time_increment(), output);
  }

  // optional float scan_time = 6;
  if (has_scan_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scan_time(), output);
  }

  // optional float range_min = 7;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->range_min(), output);
  }

  // optional float range_max = 8;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->range_max(), output);
  }

  // repeated .cartographer.sensor.proto.LaserScan.Values range = 9;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->range(i), output);
  }

  // repeated .cartographer.sensor.proto.LaserScan.Values intensity = 10;
  for (int i = 0; i < this->intensity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->intensity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LaserScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float angle_min = 2;
  if (has_angle_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_min(), target);
  }

  // optional float angle_max = 3;
  if (has_angle_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_max(), target);
  }

  // optional float angle_increment = 4;
  if (has_angle_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle_increment(), target);
  }

  // optional float time_increment = 5;
  if (has_time_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time_increment(), target);
  }

  // optional float scan_time = 6;
  if (has_scan_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scan_time(), target);
  }

  // optional float range_min = 7;
  if (has_range_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->range_min(), target);
  }

  // optional float range_max = 8;
  if (has_range_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->range_max(), target);
  }

  // repeated .cartographer.sensor.proto.LaserScan.Values range = 9;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->range(i), target);
  }

  // repeated .cartographer.sensor.proto.LaserScan.Values intensity = 10;
  for (int i = 0; i < this->intensity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->intensity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LaserScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float angle_min = 2;
    if (has_angle_min()) {
      total_size += 1 + 4;
    }

    // optional float angle_max = 3;
    if (has_angle_max()) {
      total_size += 1 + 4;
    }

    // optional float angle_increment = 4;
    if (has_angle_increment()) {
      total_size += 1 + 4;
    }

    // optional float time_increment = 5;
    if (has_time_increment()) {
      total_size += 1 + 4;
    }

    // optional float scan_time = 6;
    if (has_scan_time()) {
      total_size += 1 + 4;
    }

    // optional float range_min = 7;
    if (has_range_min()) {
      total_size += 1 + 4;
    }

    // optional float range_max = 8;
    if (has_range_max()) {
      total_size += 1 + 4;
    }

  }
  // repeated .cartographer.sensor.proto.LaserScan.Values range = 9;
  total_size += 1 * this->range_size();
  for (int i = 0; i < this->range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range(i));
  }

  // repeated .cartographer.sensor.proto.LaserScan.Values intensity = 10;
  total_size += 1 * this->intensity_size();
  for (int i = 0; i < this->intensity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intensity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaserScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaserScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_.MergeFrom(from.range_);
  intensity_.MergeFrom(from.intensity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_min()) {
      set_angle_min(from.angle_min());
    }
    if (from.has_angle_max()) {
      set_angle_max(from.angle_max());
    }
    if (from.has_angle_increment()) {
      set_angle_increment(from.angle_increment());
    }
    if (from.has_time_increment()) {
      set_time_increment(from.time_increment());
    }
    if (from.has_scan_time()) {
      set_scan_time(from.scan_time());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaserScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan::IsInitialized() const {

  return true;
}

void LaserScan::Swap(LaserScan* other) {
  if (other != this) {
    std::swap(angle_min_, other->angle_min_);
    std::swap(angle_max_, other->angle_max_);
    std::swap(angle_increment_, other->angle_increment_);
    std::swap(time_increment_, other->time_increment_);
    std::swap(scan_time_, other->scan_time_);
    std::swap(range_min_, other->range_min_);
    std::swap(range_max_, other->range_max_);
    range_.Swap(&other->range_);
    intensity_.Swap(&other->intensity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaserScan_descriptor_;
  metadata.reflection = LaserScan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeData::kOriginFieldNumber;
const int RangeData::kPointCloudFieldNumber;
const int RangeData::kMissingEchoPointCloudFieldNumber;
const int RangeData::kReflectivityFieldNumber;
#endif  // !_MSC_VER

RangeData::RangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeData::InitAsDefaultInstance() {
  origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(&::cartographer::transform::proto::Vector3f::default_instance());
  point_cloud_ = const_cast< ::cartographer::sensor::proto::PointCloud*>(&::cartographer::sensor::proto::PointCloud::default_instance());
  missing_echo_point_cloud_ = const_cast< ::cartographer::sensor::proto::PointCloud*>(&::cartographer::sensor::proto::PointCloud::default_instance());
}

RangeData::RangeData(const RangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeData::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  point_cloud_ = NULL;
  missing_echo_point_cloud_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeData::~RangeData() {
  SharedDtor();
}

void RangeData::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete point_cloud_;
    delete missing_echo_point_cloud_;
  }
}

void RangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeData_descriptor_;
}

const RangeData& RangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

RangeData* RangeData::default_instance_ = NULL;

RangeData* RangeData::New() const {
  return new RangeData;
}

void RangeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::cartographer::transform::proto::Vector3f::Clear();
    }
    if (has_point_cloud()) {
      if (point_cloud_ != NULL) point_cloud_->::cartographer::sensor::proto::PointCloud::Clear();
    }
    if (has_missing_echo_point_cloud()) {
      if (missing_echo_point_cloud_ != NULL) missing_echo_point_cloud_->::cartographer::sensor::proto::PointCloud::Clear();
    }
  }
  reflectivity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.PointCloud point_cloud = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point_cloud()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_missing_echo_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.PointCloud missing_echo_point_cloud = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missing_echo_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missing_echo_point_cloud()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reflectivity;
        break;
      }

      // repeated int32 reflectivity = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reflectivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reflectivity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_reflectivity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // optional .cartographer.sensor.proto.PointCloud point_cloud = 2;
  if (has_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point_cloud(), output);
  }

  // optional .cartographer.sensor.proto.PointCloud missing_echo_point_cloud = 3;
  if (has_missing_echo_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->missing_echo_point_cloud(), output);
  }

  // repeated int32 reflectivity = 4 [packed = true];
  if (this->reflectivity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reflectivity_cached_byte_size_);
  }
  for (int i = 0; i < this->reflectivity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->reflectivity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // optional .cartographer.sensor.proto.PointCloud point_cloud = 2;
  if (has_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point_cloud(), target);
  }

  // optional .cartographer.sensor.proto.PointCloud missing_echo_point_cloud = 3;
  if (has_missing_echo_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->missing_echo_point_cloud(), target);
  }

  // repeated int32 reflectivity = 4 [packed = true];
  if (this->reflectivity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _reflectivity_cached_byte_size_, target);
  }
  for (int i = 0; i < this->reflectivity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->reflectivity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Vector3f origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .cartographer.sensor.proto.PointCloud point_cloud = 2;
    if (has_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_cloud());
    }

    // optional .cartographer.sensor.proto.PointCloud missing_echo_point_cloud = 3;
    if (has_missing_echo_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missing_echo_point_cloud());
    }

  }
  // repeated int32 reflectivity = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->reflectivity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reflectivity(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reflectivity_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeData::MergeFrom(const RangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reflectivity_.MergeFrom(from.reflectivity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
    }
    if (from.has_point_cloud()) {
      mutable_point_cloud()->::cartographer::sensor::proto::PointCloud::MergeFrom(from.point_cloud());
    }
    if (from.has_missing_echo_point_cloud()) {
      mutable_missing_echo_point_cloud()->::cartographer::sensor::proto::PointCloud::MergeFrom(from.missing_echo_point_cloud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeData::CopyFrom(const RangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeData::IsInitialized() const {

  return true;
}

void RangeData::Swap(RangeData* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(point_cloud_, other->point_cloud_);
    std::swap(missing_echo_point_cloud_, other->missing_echo_point_cloud_);
    reflectivity_.Swap(&other->reflectivity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeData_descriptor_;
  metadata.reflection = RangeData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
